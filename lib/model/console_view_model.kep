package (
    Result,
    Input,
    
    ConsoleViewModel)
with
    import 'knockout-2.2.1' ko,
    
    import 'amulet/record' record,
    
    import 'sheut/debug' debug,
    import 'sheut/run' run,
    import 'sheut/state' {Debugger, addBreakpoint, removeBreakpoint},
    import 'sheut/step' step,
    import 'sheut/operations/context' context,
    
    import 'atum_debug_console/model/environment' {printEnvironments},
    import 'atum_debug_console/model/stack' {Stack, printStack},

    import 'atum_debug_console/object_explorer' object_explorer{AtumObject}
in {

/* Console
 ******************************************************************************/
Result = record.declare(null, [
    'value',
    'error']);

Result.prototype.type = 'result';

Input = record.declare(null, [
    'input']);

Input.prototype.type = 'input';

/* Location
 ******************************************************************************/
var Location = function(type, value) {
    
};

/* Breakpoint
 ******************************************************************************/
var Breakpoint = function(id) {
    this.id = id;
};

var Breakpoint = function(id, location) {
    this.id = id;
    this.location = location;
};

/* ConsoleViewModel
 ******************************************************************************/
ConsoleViewModel = function() {
    var self = this;
    
    self.debug = ko.observable();
    
    self.stack = ko.observable();
    self.environments = ko.observable();

    self.output = ko.observableArray();
    
    self.breakpoints = ko.observableArray();
    
    self.location = ko.computed <|\->
        (self.debug() && !self.debug().debug.complete ?
            run.extract(self.debug(), context.location, null) :
            null);
    
    self.debug.subscribe <|\debug -> {
        self.stack(debug ?
            printStack(debug) :
            new Stack(0, []));
    };
    
    self.stack.subscribe <|\stack-> let
        current = stack && stack.frames()[stack.current()]
    in
        self.environments(current ?
            printEnvironments(self.debug(), current.environment) :
            []);
};

ConsoleViewModel.prototype.beginDebugging = \input, ok, err -> let
    state = this.breakpoints().reduce(
        \d, b, i ->
            addBreakpoint(d, i, b),
        Debugger.initial)
in 
    this.debug(
        debug.beginInput(
            state,
            input,
            ok,
            err));

ConsoleViewModel.prototype.finish = \() ->
    this.debug(step.finish(this.debug()));

ConsoleViewModel.prototype.run = \() ->
    this.debug(step.run(this.debug()));

ConsoleViewModel.prototype.stepOver = \() ->
    this.debug(step.stepOver(this.debug()));

ConsoleViewModel.prototype.stepInto = \() ->
    this.debug(step.stepNextLine(this.debug()));

ConsoleViewModel.prototype.stepOut = \() ->
    this.debug(step.stepOut(this.debug()));

ConsoleViewModel.prototype.stop = \() ->
    this.debug(null);

ConsoleViewModel.prototype.pushResult = \value, ctx, error ->
    this.output.push(
        Result.create(object_explorer.create(value, ctx), error));

ConsoleViewModel.prototype.pushInput = \input ->
    this.output.push(
        Input.create(input));

ConsoleViewModel.prototype.selectFrame = \index, frame -> {
    this.stack(new Stack(index, this.stack().frames()));
};

}