package (
    Result,
    Input,
    
    ConsoleViewModel)
with
    import 'knockout-2.2.1' ko,
    
    import 'amulet/record' record,
    
    import 'sheut/debug' debug,
    import 'sheut/run' run,
    import 'sheut/state' {Debugger, addBreakpoint, removeBreakpoint},
    import 'sheut/step' step,
    import 'sheut/operations/context' context,
    
    import 'atum_debug_console/model/environment' {printEnvironments},
    import 'atum_debug_console/model/stack' {Stack, printStack},
    import 'atum_debug_console/model/breakpoint' {ConditionalBreakpoint, UnconditionalBreakpoint},

    import 'atum_debug_console/object_explorer' object_explorer
in {

/* Console
 ******************************************************************************/
Result = record.declare(null, [
    'value',
    'error']);

Result.prototype.type = 'result';

Input = record.declare(null, [
    'input']);

Input.prototype.type = 'input';

/* Location
 ******************************************************************************/
var Location = function(type, value) {
    
};

/* ConsoleViewModel
 ******************************************************************************/
ConsoleViewModel = function() {
    var self = this;
    
    self.debug = ko.observable(Debugger.initial);
    
    self.debugState = ko.observable();
    
    self.debugging = ko.observable();
    
    self.stack = ko.observable();
    self.location = ko.observable();
    self.environments = ko.observable();

    self.output = ko.observableArray();
    self.breakpoints = ko.observableArray();
    
    
    self.debug.subscribe <|\d -> {
        if (d && self.debugState() !== d.debug)
            self.debugState(d.debug);
    };
    
    self.debugState.subscribe <|\debugState -> {
        if (debugState) {
            self.stack(printStack(self.debug()));
            self.location(run.extract(self.debug(), context.location, null));
        } else {
            self.stack(new Stack(0, []));
            self.location(null);
        }
        self.debugging(debugState && !debugState.complete);
    };
    
    self.stack.subscribe <|\stack-> let
        current = stack && stack.frames()[stack.current()]
    in
        self.environments(current ?
            printEnvironments(self.debug(), current.environment) :
            []);
};

ConsoleViewModel.prototype.beginDebugging = \input, ok, err ->
    this.debug(
        debug.beginInput(
            this.debug(),
            input,
            ok,
            err));

ConsoleViewModel.prototype.finish = \() ->
    this.debug(step.finish(this.debug()));

ConsoleViewModel.prototype.run = \() ->
    this.debug(step.run(this.debug()));

ConsoleViewModel.prototype.stepOver = \() ->
    this.debug(step.stepOver(this.debug()));

ConsoleViewModel.prototype.stepInto = \() ->
    this.debug(step.stepNextLine(this.debug()));

ConsoleViewModel.prototype.stepOut = \() ->
    this.debug(step.stepOut(this.debug()));

ConsoleViewModel.prototype.stop = \() ->
    this.debugging(false);

ConsoleViewModel.prototype.pushResult = \value, ctx, error ->
    this.output.push(
        Result.create(object_explorer.create(value, ctx), error));

ConsoleViewModel.prototype.pushInput = \input ->
    this.output.push(
        Input.create(input));

ConsoleViewModel.prototype.selectFrame = \index, frame ->
    this.stack(
        new Stack(index, this.stack().frames()));

ConsoleViewModel.prototype.addBreakpoint = \doc, handle -> {
    var b = UnconditionalBreakpoint.create(
        this.breakpoints().length + '',
        doc,
        handle);
    
    this.debug(addBreakpoint(this.debug(), b.id, b.getImpl()));
    
    this.breakpoints.push(b);
};

ConsoleViewModel.prototype.removeBreakpoint = \doc, handle -> {
    var pred = \x -> x.doc === doc && x.handle === handle;
    var b = this.breakpoints().filter(pred)[0];

    this.debug(removeBreakpoint(this.debug(), b.id));
    
    this.breakpoints.remove(pred);
};

ConsoleViewModel.prototype.createNewConditionalBreakpoint = \ -> {
    var b = ConditionalBreakpoint.create(
        this.breakpoints().length + '',
        "bla");
    
    this.debug(addBreakpoint(this.debug(), b.id, b.getImpl()));
    
    this.breakpoints.push(b);
};

ConsoleViewModel.prototype.updateBreakpoints = \ -> {
    this.breakpoints.removeAll(\x -> !x.update());
};

}