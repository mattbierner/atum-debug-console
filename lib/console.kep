package ()
with
    import 'knockout-2.2.1' ko,
    
    import 'sheut/debug' debug,
    import 'sheut/step' step,
    import 'sheut/run' run,
    import 'sheut/operations/evaluation' evaluate,
    
    import 'atum_debug_console/model' atum_debug_model,
    import 'atum_debug_console/object_explorer' object_explorer
in {

static CodeMirror;
static document;
static $;

var id = \x -> x;

var model;

/* 
 ******************************************************************************/
var updateAccordions = \() ->
    $('.object-browser').each(\ ->
        ($(this).hasClass('ui-accordion') ?
            $(this) :
            $(this).accordion({
                'collapsible': true,
                'animate': 100,
                'heightStyle': "content",
                'active': false
            })));

var out = {
    'write': \x, ctx -> {
        model.pushResult(x, ctx, false);
        updateAccordions();
        $('#output > ul')
            .scrollTop($('#output > ul')[0].scrollHeight);
    }
};

var errorOut = {
    'write': \x, ctx -> {
        model.pushResult(x, ctx, true);
        updateAccordions();
        $('#output > ul')
            .scrollTop($('#output > ul')[0].scrollHeight);
    }
};

/* Code Mirror
 ******************************************************************************/
var cm = CodeMirror(document.getElementById('input'), {
    'mode': 'javascript',
    'lineNumbers': true
});

var doc = cm.doc;

var interactive = CodeMirror(document.getElementById('output-interactive-textarea'), {
    'mode': 'javascript',
    'lineNumbers': false
});
var interactiveDoc = interactive.doc;

interactive.setSize(null, 20);

interactive.on('beforeChange', function(instance, change) {
    change.update(change.from, change.to, [change.text.join("").replace(`\n`g, "")]);
    return true;
});

interactive.on('keyHandled', function(instance, name, event) {
    if (name === 'Enter') {
        var input = interactiveDoc.getValue();
        with
            writeOut = \x, ctx -> {
                interactive.setValue('');
                model.pushInput(input);
                out.write(x, ctx);
            },
            writeError = \x, ctx -> {
                interactive.setValue('');
                model.pushInput(input);
                errorOut.write(x, ctx);
            }
        in {
            if (model.debug()) {
                run.evaluate(
                    model.debug(),
                    evaluate.evaluateInput(input),
                    writeOut,
                    writeError);
            } else {
                step.finish(
                    debug.beginInput(
                        input,
                        writeOut,
                        writeError));
            }
        }
    }
});

/* 
 ******************************************************************************/
model = new atum_debug_model.ConsoleViewModel();

ko.applyBindings(model);

model.location.subscribe(\current -> {
    if (current && current.start)
        cm.removeLineClass(current.start.line - 1, 'background', 'active-line');
}, null, 'beforeChange');

model.location.subscribe(\x -> {
    if (x && x.start)
       cm.addLineClass(x.start.line - 1, 'background', 'active-line');
});

model.environments.subscribe(\x -> {
    updateAccordions();
});

/* 
 ******************************************************************************/
$(function(){
    var stopButton = $('button#stop-button'),
        runButton = $('button#run-button'),
        stepButton = $('button#step-button'),
        stepOutButton = $('button#step-out-button'),
        stepIntoButton = $('button#step-into-button'),
        stepOverButton = $('button#step-over-button');

    $('#container')
        .layout();
    
    model.debug.subscribe(\x -> {
        var disable = !x || x.debug.complete;
        stopButton.button('option', "disabled", disable);
        runButton.button('option', "disabled", disable);
        stepButton.button('option', "disabled", disable);
        stepOverButton.button('option', "disabled", disable);
        stepIntoButton.button('option', "disabled", disable);
        stepOutButton.button('option', "disabled", disable);
    });
    
    $("#output > ul").on("accordionactivate", '.object-browser', \event, ui ->
        $('#output > ul').scrollTop($(this).offset().top));
    
    $('button#eval-button')
        .button()
        .click(\e -> {
            var input = doc.getValue();
            model.debug(
                debug.beginInput(
                    input,
                    out.write,
                    errorOut.write));
            model.finish();
        });
    
    $('button#debug-button')
        .button()
        .click(\e -> {
            var input = doc.getValue();
            
            model.debug(
                debug.beginInput(
                    input,
                    out.write,
                    errorOut.write));
        });
    
    stopButton
        .button({'disabled': true})
        .click(function(e){
            model.stop();
        });

    runButton
        .button({'disabled': true})
        .click(function(e) {
            model.run();
        });
    
    stepButton
        .button({'disabled': true})
        .click(function(e){
            model.stepOver();
        });
    
    stepIntoButton
        .button({'disabled': true})
        .click(function(e){
            model.stepInto();
        });
    
    stepOutButton
        .button({'disabled': true})
        .click(function(e){
            model.stepOut();
        });
});

}