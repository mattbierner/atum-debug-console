package ()
with
    import 'knockout-2.2.1' ko,
    
    import 'atum_debug_console/binding/accordion_binding' accordion_binding,
    import 'atum_debug_console/binding/breakpoint_editor' breakpoint_editor,
    import 'atum_debug_console/binding/highlight_binding' highlight_binding,
    import 'atum_debug_console/binding/popover_binding' popover_binding,
    
    import 'atum_debug_console/model/console_view_model' atum_debug_model,
    import 'atum_debug_console/editor/interactive' interactive
in {

static CodeMirror;
static document;
static $;

var model;

/* 
 ******************************************************************************/
var out = {
    'write': \x, ctx -> {
        model.pushResult(x, ctx, false);
        $('#output > ul')
            .scrollTop($('#output > ul')[0].scrollHeight);
    }
};

var errorOut = {
    'write': \x, ctx -> {
        model.pushResult(x, ctx, true);
        $('#output > ul')
            .scrollTop($('#output > ul')[0].scrollHeight);
    }
};

/* Code Mirror
 ******************************************************************************/
var cm = CodeMirror(document.getElementById('input'), {
    'mode': 'javascript',
    'lineNumbers': true,
    'gutters': ['editor-breakpoints', 'CodeMirror-linenumbers']
});

/**
 * Gutter breakpoints
 */
cm.on("gutterClick", let
    makeMarker = \ -> {
        var marker = document.createElement("div");
        marker.className = 'editor-breakpoint';
        return marker;
    }
in
    \cm, n ->
        let info = cm.lineInfo(n) in
            (info.gutterMarkers ?
                let lh = cm.setGutterMarker(n, 'editor-breakpoints', null) in
                    model.removeBreakpoint(cm.doc, lh) :
                
                let lh = cm.setGutterMarker(n, 'editor-breakpoints', makeMarker()) in
                    model.addBreakpoint(cm.doc, lh)));

/**
 * Prevent editing while debugging.
 */
cm.on("beforeChange", \cm, change -> {
    if (model.debugging())
        return change.cancel();
});

/**
 * Prevent editing while debugging.
 */
cm.on("change", \cm, change -> {
    model.updateBreakpoints();
});

/* 
 ******************************************************************************/
accordion_binding.init(ko);
popover_binding.init(ko);
breakpoint_editor.init(ko);
highlight_binding.init(ko);

model = new atum_debug_model.ConsoleViewModel();

ko.applyBindings(model);

model.location.subscribe(\current -> {
    if (current && current.start)
        cm.removeLineClass(current.start.line - 1, 'background', 'active-line');
}, null, 'beforeChange');

model.location.subscribe(\x -> {
    if (x && x.start)
       cm.addLineClass(x.start.line - 1, 'background', 'active-line');
});

/* 
 ******************************************************************************/
$(function(){
    model.interactive = interactive.create(document.getElementById('output-interactive-textarea'), model);
    
    var evalButton = $('button#eval-button'),
        debugButton = $('button#debug-button'),
        stopButton = $('button#stop-button'),
        runButton = $('button#run-button'),
        stepButton = $('button#step-button'),
        stepOutButton = $('button#step-out-button'),
        stepIntoButton = $('button#step-into-button'),
        stepOverButton = $('button#step-over-button');
    
    $('#container')
        .layout();
    
    $('#left-panel')
        .tabs();
    
    $('#right-panel')
        .tabs();
    
    model.debugging.subscribe(\debugging -> {
        evalButton.prop('disabled', debugging);
        debugButton.prop('disabled', debugging);

        stopButton.prop('disabled', !debugging);
        runButton.prop('disabled',  !debugging);
        stepButton.prop('disabled',  !debugging);
        stepOverButton.prop('disabled', !debugging);
        stepIntoButton.prop('disabled', !debugging);
        stepOutButton.prop('disabled', !debugging);
    });
    
    $("#output > ul")
        .on("accordionactivate", '.object-browser', \event, ui ->
            $('#output > ul').scrollTop($(this).offset().top));
    
    evalButton
        .button()
        .click(\-> {
            model.beginDebugging(
                cm.doc.getValue(),
                out.write,
                errorOut.write);
            model.finish();
        });
     
    debugButton
        .button()
        .click(\->
            model.beginDebugging(
                cm.doc.getValue(),
                out.write,
                errorOut.write));
    
    stopButton
        .button()
        .prop('disabled', true)
        .click(function(e){
            model.stop();
        });

    runButton
        .button()
        .prop('disabled', true)
        .click(function(e) {
            model.run();
        });
    
    stepButton
        .button()
        .prop('disabled', true)
        .click(function(e){
            model.stepOver();
        });
    
    stepIntoButton
        .button()
        .prop('disabled', true)
        .click(function(e){
            model.stepInto();
        });
    
    stepOutButton
        .button()
        .prop('disabled', true)
        .click(function(e){
            model.stepOut();
        });
    
    
    $('#interactive-branch-button')
        .button()
        .click(function(e){
            model.interactiveBranch();
        });
    
    $('#interactive-inject-button')
        .button()
        .click(function(e){
            model.interactiveInject();
        });
});

}