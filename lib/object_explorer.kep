package (
    AtumObject,
    updateAccordions,
    create,
    createForKey)
with
    import 'knockout-2.2.1' ko,
    
    import 'amulet/record' record,
    
    import 'atum/compute' {just},
    
    import 'sheut/debug' debug,
    import 'sheut/run' run,
    import 'sheut/fun' {map},
    import 'sheut/operations/object' object,
    import 'sheut/operations/reference' reference
in {

static $;

var noop = \->{};

/* 
 ******************************************************************************/
var AtumChild = record.declare(null, [
    'key',
    'value'],
    function(key, value) {
        var self = this;
    
        self.key = ko.observable(key);
        self.value = ko.observable(value);
    });

AtumObject = function(d, x) {
    var self = this;
    
    var value = run.extract(d, reference.getValue(x), null);
    
    self.data = x;
    self.ctx = d;
    
    self.value = ko.observable(value);
    self.children = ko.observableArray();
    
    self.type = ko.observable(value ? value.type : null);
    self.isObject = ko.observable(value && value.type === 'object');
    self.displayValue = run.extract(d, object.displayName(x), 'ERROR');
};

AtumObject.prototype.getChildren = \data, event -> {
    var self = this;
    
    if (!self.isObject() || self.children().length)
        return;
    
    run.extract(self.ctx,
        object.getPrototype(self.data),
        null,
        \value -> {
            if (value)
                self.children.push(new AtumChild("__proto__", new AtumObject(self.ctx, value)));
        });
    
    run.extract(self.ctx,
        object.getOwnPropertyNames(self.data),
        null,
        (map, \key ->
            run.extract(self.ctx,
                object.get(self.data, key),
                null,
                \value ->
                    self.children.push(new AtumChild(key, new AtumObject(self.ctx, value))))));
};

create = \value, ctx -> {
    var obj = new AtumObject(debug.debug(just(value), ctx, noop, noop), value);
    obj.getChildren();
    return obj;
};

createForKey = \key, value, ctx ->
    new AtumChild(key, create(value, ctx));

}