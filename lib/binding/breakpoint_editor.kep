/**
 * @fileOverview Knockout binding for editing a breakpoint
 */
package (
    init)
{

static $;
static CodeMirror;

init = \ko -> {
    ko.bindingHandlers.breakpointEditor = {
        'init': \element, valueAccessor, allBindings, viewModel, bindingContext -> {
            var editor = CodeMirror(element, {
                'mode': 'javascript',
                'lineNumbers': true,
                'value': (valueAccessor().prog() || ""),
                'readOnly': false,
                'viewportMargin': Infinity
            });
            
            editor.on('change', \cm -> void
                valueAccessor().prog(cm.getValue()));
            
            $('body').on('shown', $(element), \() -> void
                editor.refresh());
            
            with wrapperElement = $(editor.getWrapperElement()) in {
                ko.utils.domNodeDisposal.addDisposeCallback(element, \() -> void
                    wrapperElement.remove());
            }
        },
        
        'update': \element, valueAccessor, allBindings, viewModel, bindingContext -> {
            if (!element.editor) return;
            
            element.editor.refresh();
        }
    };
};

}